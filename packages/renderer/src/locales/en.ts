
export default {
  avatar: "Avatar",
  avatars: 'Avatars',
  defaultAvatar: 'Default Avatar template',
  avatarTemplateName: 'Avatar Template',
  avatarTemplateEdit: 'Edit Avatar Template',
  editAvatarTemplate: 'Edit Avatar Template',
  generatorUsageLimit:'Generator usage limit',
  name: 'Name',
  enable: 'enable',
  conditions:'conditions',
  edit: 'Edit',
  copyAndAdd: 'Copy and Add',
  delete: 'Delete',
  close: 'Close',
  cancel: 'Cancel',
  ok: 'OK',
  min:'min',
  convNum:'number of conversations',
  loop:'loop',
  time:'Time',
  date:'Date',
  execution:'execution',
  deleteAvatarConfirm: 'Delete {name}?',
  // System Settings
  systemSetting: 'System Setting',
  generalSettings: 'General Settings',
  general: 'General',
  contextGenerator: 'Context Gen',
  contextDaemon: 'Context Daemon',
  contextDaemonLabel: 'Context Daemon Settings',
  contextGeneratorCommonSettings: 'Context Generator Common Settings',
  generatorCommonSettingsDescription: 'Configure common settings for generators (including LLM)',
  generatorName: 'Generator Name',
  directTrigger: 'Use the trigger context directly as the input context',
  outputContextAttr: 'Output Context Attributes',
  addContextDaemon:'Add context daemon',
  outputClass: 'Output Class',
  outputRole: 'Output Role',
  outputContext: 'Output ContextLine',
  mcpSettings: 'MCP Settings',
  mcpPermission: 'MCP permission',
  setMcpPermissions: 'Set MCP permissions',
  mcpNotice: 'Note: MCP poses security and operational safety risks. Please consider the risks before deciding whether to use it.',
  avatarCommunication: 'Avatar Communication',
  openSourceNotice: 'This software uses the following open source software.',
  baseElectronBoilerplate: 'base electron boilerplate',
  apiKey: 'API Key',
  textModel: 'Text Model',
  imageModel: 'Image Model',
  voiceModel: 'Voice Model',
  voice: 'Voice',
  voiceCutoffTextLimit:'Text cutoff limit(default 150)',
  addMcpDef: 'Add MCP Definition',
  mcpName:'mcp setting name',
  onlyAlphaNum: '(Only alphanumeric characters are allowed.)',
  mcpJson:'mcp definition json',
  avatarCom: 'Avatar Communication',
  startSocketIoServer: 'Start local Socket.io Server',
  portNumber: 'Port Number',
  useWebSocketCommunication: 'Use avatar communication',
  remoteServerAddress:'Remote socket.io server address (if empty uses localServer, e.g. http://192.168.1.10:3010 )',
  noteSecurityCom:'Communication between avatars is not encrypted.',
  importExtTalk: 'External communication capture',
  templateImportExtTalk: 'External communication import template',
  license: 'License',
  openaiImageNotice: '(OpenAI image generation authentication required)',
  wizard: {
    title2: 'Set up Gemini API Key',
    title3: 'Select communication between avatars',
    title4: 'Confirmation',
    title5: 'Basic settings completed',
    gemini: {
      keyLabel: 'Gemini API Key',
      required: 'Gemini API key is required'
    },
    avatar: {
      serverLabel: 'Start an avatar communication server'
    },
    buttons: {
      exit: 'Exit',
      prev: 'Prev',
      next: 'Next',
      save: 'Save',
      done: 'Done'
    }
  },
  trigger:{
    Startup:'At startup',
    TalkAfterMin:'min after conversation ends',
    IfContextExists: 'When a specified context occurs',
    IfSummaryCounterOver:'context numbers after Summarize',
    IfExtTalkCounterOver:'external context numbers',
    TimerMin:'after minutes',
    DayTimeDirect: 'Today\'s time',
    DateTimeDirect: 'Date and time',
    selectCondition:'Select the start condition',
  },
  importExport:'Import/Export',
  importSys:'Import System Settings',
  importSysInfo:'Read the system settings',
  exportSys:'Export System Settings',
  exportSysInfo:'Write the system settings',
  importAvatar:'Import Avatar Settings',
  importAvatarInfo:'Read the avatar settings',
  exportAvatar:'Export Avatar Settings',
  exportAvatarInfo:'Write the avatar settings',
  mcpPermissionSet: {
    any: 'O Always Allow',
    no: 'X Donâ€™t Allow',
    ask: '! Ask Every Time'
  },
  enableHide: 'Enable/Hide',
}
